   1 0000               #
   2 0000               # FILE:        $connect4$
   3 0000               # AUTHOR:      S. Bahdah
   4 0000               #
   5 0000               
   6 0000               #
   7 0000               # DATA AREAS
   8 0000               #
   9 0000                       .data
  10 0000                       .align  2   # word data must be on word boundaries
  11 0000               
  12 0000               # 
  13 0000               print_welcome:
  14 0000 2020202A	        .ascii  "   ************************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  15 001c 2020202A	        .ascii  "   **    Connect Four    **\n"
          2A202020
          20436F6E
          6E656374
          20466F75
          72202020
  16 0038 2020202A	        .asciiz "   ************************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
  17 0055               
  18 0055               grid_intro:
  19 0055 20202030	        .asciiz "   0   1   2   3   4   5   6\n"
          20202031
          20202032
          20202033
          20202034
          20202035
  20 0073               grid_core:
  21 0073 2B2D2D2D	        .ascii  "+-----------------------------+\n"
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
  22 0093 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  23 00b3 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  24 00d3 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  25 00f3 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  26 0113 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  27 0133 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  28 0153 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  29 0173 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  30 0193 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  31 01b3 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  32 01d3 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  33 01f3 7C7C2020	        .ascii  "||   |   |   |   |   |   |   ||\n"
          207C2020
          207C2020
          207C2020
          207C2020
          207C2020
  34 0213 7C2B2D2D	        .ascii  "|+---+---+---+---+---+---+---+|\n"
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
          2D2B2D2D
  35 0233 2B2D2D2D	        .asciiz "+-----------------------------+\n"
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
          2D2D2D2D
  36 0254               grid_end:
  37 0254 20202030	        .asciiz "   0   1   2   3   4   5   6\n"
          20202031
          20202032
          20202033
          20202034
          20202035
  38 0272               
  39 0272               
  40 0272               grid_location:
  41 0272 0000    	        .word 67, 71, 75, 79, 83, 87, 91
     0274 00000043
     0278 00000047
     027c 0000004B
     0280 0000004F
     0284 00000053
  42 0290 00000083	        .word 131, 135, 139, 143, 147, 151, 155
     0294 00000087
     0298 0000008B
     029c 0000008F
     02a0 00000093
     02a4 00000097
  43 02ac 000000C3	        .word 195, 199, 203, 207, 211, 215, 219
     02b0 000000C7
     02b4 000000CB
     02b8 000000CF
     02bc 000000D3
     02c0 000000D7
  44 02c8 00000103	        .word 259, 263, 267, 271, 275, 279, 283
     02cc 00000107
     02d0 0000010B
     02d4 0000010F
     02d8 00000113
     02dc 00000117
  45 02e4 00000143	        .word 323, 327, 331, 335, 339, 343, 347
     02e8 00000147
     02ec 0000014B
     02f0 0000014F
     02f4 00000153
     02f8 00000157
  46 0300 00000183	        .word 387, 391, 395, 399, 403, 407, 411
     0304 00000187
     0308 0000018B
     030c 0000018F
     0310 00000193
     0314 00000197
  47 031c               
  48 031c               
  49 031c               print_newline:
  50 031c 0A00    	        .asciiz "\n"
  51 031e               print_space:
  52 031e 2000    	        .asciiz " "
  53 0320               print_player_one:
  54 0320 0A506C61	        .asciiz "\nPlayer 1: select a row to place your coin (0-6 or -1 to quit):"
          79657220
          313A2073
          656C6563
          74206120
          726F7720
  55 0360               print_player_two:
  56 0360 0A506C61	        .asciiz "\nPlayer 2: select a row to place your coin (0-6 or -1 to quit):"
          79657220
          323A2073
          656C6563
          74206120
          726F7720
  57 03a0               print_illegal_number:
  58 03a0 496C6C65	        .asciiz "Illegal column number."
          67616C20
          636F6C75
          6D6E206E
          756D6265
          722E00  
  59 03b7               print_no_room:
  60 03b7 496C6C65	        .asciiz "Illegal move, no more room in that column."
          67616C20
          6D6F7665
          2C206E6F
          206D6F72
          6520726F
  61 03e2               print_tie:
  62 03e2 54686520	        .asciiz "The game ends in a tie.\n"
          67616D65
          20656E64
          7320696E
          20612074
          69652E0A
  63 03fb               print_one_winner:
  64 03fb 0A506C61	        .asciiz "\nPlayer 1 wins!\n"
          79657220
          31207769
          6E73210A
          00      
  65 040c               print_two_winner:
  66 040c 0A506C61	        .asciiz "\nPlayer 2 wins!\n"
          79657220
          32207769
          6E73210A
          00      
  67 041d               print_one_quit:
  68 041d 506C6179	        .asciiz "Player 1 quit.\n"
          65722031
          20717569
          742E0A00
  69 042d               print_two_quit:
  70 042d 506C6179	        .asciiz "Player 2 quit.\n"
          65722032
          20717569
          742E0A00
  71 043d               
  72 043d               
  73 043d               #
  74 043d               # CODE AREAS
  75 043d               #
  76 0000                       .text         # this is program code
  77 0000                       .align  2     # instructions must be on word boundaries
  78 0000                       
  79 0000                       .globl  main  # main is the global label. program starts here
  80 0000               
  81 0000               
  82 0000               
  83 0000               #
  84 0000               # Name:    main
  85 0000               #
  86 0000               
  87 0000               LENGTH = 42
  88 0000               FRAMESIZE_48 = 48
  89 0000               PRINT_INT = 1    # code for syscall to print integer
  90 0000               PRINT_STRING = 4 # code for syscall to print a string
  91 0000               READ_INT = 5     # code for syscall to read an integer
  92 0000               
  93 0000               main:
  94 0000                       # allocate stack frame
  95 0000 23BDFFD0	        addi  $sp, $sp, -FRAMESIZE_48
  96 0004 AFBF002C	        sw    $ra, -4+FRAMESIZE_48($sp)
  97 0008 AFB70028	        sw    $s7, -8+FRAMESIZE_48($sp)
  98 000c AFB60024	        sw    $s6, -12+FRAMESIZE_48($sp)
  99 0010 AFB50020	        sw    $s5, -16+FRAMESIZE_48($sp)
 100 0014 AFB4001C	        sw    $s4, -20+FRAMESIZE_48($sp)
 101 0018 AFB30018	        sw    $s3, -24+FRAMESIZE_48($sp)
 102 001c AFB20014	        sw    $s2, -28+FRAMESIZE_48($sp)
 103 0020 AFB10010	        sw    $s1, -32+FRAMESIZE_48($sp)
 104 0024 AFB0000C	        sw    $s0, -36+FRAMESIZE_48($sp)
 105 0028               
 106 0028 0C000228	        jal   display_intro
 107 002c                       
 108 002c                       ## player toggle
 109 002c                       # zero is player 1
 110 002c                       # one  is player 2
 111 002c 20100000	        addi  $s0, $zero, 0
 112 0030 0C000018	        jal   play_game_zero
 113 0034               
 114 0034                       
 115 0034               
 116 0034                       # end the program
 117 0034               
 118 0034 8FBF002C	        lw    $ra, -4+FRAMESIZE_48($sp)
 119 0038 8FB70028	        lw    $s7, -8+FRAMESIZE_48($sp)
 120 003c 8FB60024	        lw    $s6, -12+FRAMESIZE_48($sp)
 121 0040 8FB50020	        lw    $s5, -16+FRAMESIZE_48($sp)
 122 0044 8FB4001C	        lw    $s4, -20+FRAMESIZE_48($sp)
 123 0048 8FB30018	        lw    $s3, -24+FRAMESIZE_48($sp)
 124 004c 8FB20014	        lw    $s2, -28+FRAMESIZE_48($sp)
 125 0050 8FB10010	        lw    $s1, -32+FRAMESIZE_48($sp)
 126 0054 8FB0000C	        lw    $s0, -36+FRAMESIZE_48($sp)
 127 0058               
 128 0058 23BD0030	        addi  $sp, $sp, FRAMESIZE_48
 129 005c 03E00008	        jr    $ra   # return from main and exit
 130 0060               
 131 0060               #
 132 0060               # start the game
 133 0060               #
 134 0060               
 135 0060               play_game_zero:
 136 0060 23BDFFFC	        addi  $sp, $sp, -4
 137 0064 AFBF0000	        sw    $ra, 0($sp)
 138 0068 20170000	        addi  $s7, $zero, 0    # counter for tie
 139 006c 2016002A	        addi  $s6, $zero, 42
 140 0070               
 141 0070 0800001D	        j     play_game_one
 142 0074               
 143 0074               play_game_one:
 144 0074                       # print player message
 145 0074 12000001	        beq   $s0, $zero, player_one_message
 146 0078 08000024	        j     player_two_message
 147 007c               
 148 007c               player_one_message:
 149 007c                       # print player one
 150 007c 34020004	        li    $v0, PRINT_STRING
 151 0080 3C040000	        la    $a0, print_player_one
     0084 34840000
 152 0088 0000000C	        syscall
 153 008c 08000029	        j     play_game_two
 154 0090               
 155 0090               player_two_message:
 156 0090                       # print player two
 157 0090 34020004	        li    $v0, PRINT_STRING
 158 0094 3C040000	        la    $a0, print_player_two
     0098 34840000
 159 009c 0000000C	        syscall
 160 00a0 08000029	        j     play_game_two
 161 00a4               
 162 00a4               play_game_two:
 163 00a4                       # get user input
 164 00a4 34020005	        la    $v0, READ_INT
 165 00a8 0000000C	        syscall
 166 00ac 00408821	        move  $s1, $v0  #store user input
 167 00b0               
 168 00b0               # check if player quits
 169 00b0 2008FFFF	        addi  $t0, $zero, -1
 170 00b4 122801EA	        beq   $s1, $t0, player_quits
 171 00b8               
 172 00b8               # check valid range
 173 00b8 2008FFFF	        addi  $t0, $zero, -1
 174 00bc 20090006	        addi  $t1, $zero, 6
 175 00c0               # if 6 < input
 176 00c0 0131482A	        slt   $t1, $t1, $s1
 177 00c4 152001D1	        bne   $t1, $zero, not_valid_input
 178 00c8               # if input < -1
 179 00c8 0228402A	        slt   $t0, $s1, $t0
 180 00cc 150001CF	        bne   $t0, $zero, not_valid_input
 181 00d0               
 182 00d0               # check valid spot in col
 183 00d0 0C0001DC	        jal   check_valid_col
 184 00d4                       # s2: is there space? s3: the address of value change
 185 00d4 164001C8	        bne   $s2, $zero, no_room
 186 00d8                       # s2 no longer important after here
 187 00d8                       # can reuse t0-9 from here
 188 00d8               
 189 00d8               # add token based on player
 190 00d8 12000001	        beq   $s0, $zero, place_x
 191 00dc 0800003C	        j     place_o
 192 00e0               
 193 00e0               place_x:
 194 00e0                       # player 1: X
 195 00e0                       # add X to the blank
 196 00e0 20080058	        addi  $t0, $zero, 88
 197 00e4 A2680000	        sb    $t0, 0($s3)     # change to 'X'
 198 00e8 22F70001	        addi  $s7, $s7, 1
 199 00ec 08000040	        j     play_game_three
 200 00f0               
 201 00f0               place_o:
 202 00f0                       # player 2: O
 203 00f0                       # add O to the blank
 204 00f0 2008004F	        addi  $t0, $zero, 79
 205 00f4 A2680000	        sb    $t0, 0($s3)     # change to 'O'
 206 00f8 22F70001	        addi  $s7, $s7, 1
 207 00fc 08000040	        j     play_game_three
 208 0100               
 209 0100               
 210 0100               play_game_three:
 211 0100                       # display the board
 212 0100 0C000241	        jal   display_board
 213 0104               
 214 0104               # check tie condition
 215 0104 12F60193	        beq   $s7, $s6, tie_and_end
 216 0108               
 217 0108               # check winning condition
 218 0108               
 219 0108                       # set a0 as player toggle
 220 0108 02002021	        move  $a0, $s0
 221 010c 0C00004C	        jal win_start
 222 0110                       # get v0 for win case
 223 0110 104001C3	        beq   $v0, $zero, player_wins    # win
 224 0114               
 225 0114               
 226 0114               
 227 0114 08000046	        j     play_game_four
 228 0118               
 229 0118               play_game_four:
 230 0118               # change player and end turn
 231 0118 12000003	        beq   $s0, $zero, goto_player_two
 232 011c 08000048	        j     goto_player_one
 233 0120               
 234 0120               goto_player_one:
 235 0120 20100000	        addi  $s0, $zero, 0
 236 0124 0800001D	        j     play_game_one
 237 0128               
 238 0128               goto_player_two:
 239 0128 20100001	        addi  $s0, $zero, 1
 240 012c 0800001D	        j     play_game_one
 241 0130               
 242 0130               
 243 0130               
 244 0130               
 245 0130               
 246 0130               
 247 0130               
 248 0130               
 249 0130               
 250 0130               
 251 0130               # a0: player toggle
 252 0130               # check win condition
 253 0130               # v0: win
 254 0130               win_start:
 255 0130 23BDFFD0	        addi  $sp, $sp, -FRAMESIZE_48
 256 0134 AFBF002C	        sw    $ra, -4+FRAMESIZE_48($sp)
 257 0138 AFB70028	        sw    $s7, -8+FRAMESIZE_48($sp)
 258 013c AFB60024	        sw    $s6, -12+FRAMESIZE_48($sp)
 259 0140 AFB50020	        sw    $s5, -16+FRAMESIZE_48($sp)
 260 0144 AFB4001C	        sw    $s4, -20+FRAMESIZE_48($sp)
 261 0148 AFB30018	        sw    $s3, -24+FRAMESIZE_48($sp)
 262 014c AFB20014	        sw    $s2, -28+FRAMESIZE_48($sp)
 263 0150 AFB10010	        sw    $s1, -32+FRAMESIZE_48($sp)
 264 0154 AFB0000C	        sw    $s0, -36+FRAMESIZE_48($sp)
 265 0158               
 266 0158 20100006	        addi  $s0, $zero, 6   # row
 267 015c 20110007	        addi  $s1, $zero, 7   # col
 268 0160               
 269 0160               
 270 0160 10800001	        beq   $a0, $zero, win_x
 271 0164               
 272 0164 0800005C	        j     win_o
 273 0168               #
 274 0168               # toggle player
 275 0168               #
 276 0168               win_x:
 277 0168 20120058	        addi  $s2, $zero, 88  # X
 278 016c 0800005E	        j     hor_loop_zero
 279 0170               
 280 0170               win_o:
 281 0170 2012004F	        addi  $s2, $zero, 79  # O 
 282 0174 0800005E	        j     hor_loop_zero
 283 0178               
 284 0178               #
 285 0178               # Check horizontal locations for win
 286 0178               #
 287 0178               hor_loop_zero:
 288 0178                       # set counter for row and col
 289 0178 2235FFFD	        addi  $s5, $s1, -3
 290 017c 20160000	        addi  $s6, $zero, 0 # counter row
 291 0180 20170000	        addi  $s7, $zero, 0 # counter col
 292 0184               
 293 0184 08000062	        j     hor_loop_one
 294 0188               
 295 0188               hor_loop_one:
 296 0188                       # col
 297 0188 12F5004C	        beq   $s7, $s5, end_hor_loop_one
 298 018c 08000064	        j     hor_loop_two
 299 0190               
 300 0190               
 301 0190               hor_loop_two:
 302 0190                       # row
 303 0190 12D00047	        beq   $s6, $s0, end_hor_loop_two
 304 0194 08000066	        j     hor_if_one
 305 0198               
 306 0198               #####
 307 0198               # the if statements
 308 0198               hor_if_one:
 309 0198               # math (7 * r) + c + 0
 310 0198 02360018	        mult  $s1, $s6    # (7 * counter row)
 311 019c 00004012	        mflo  $t0
 312 01a0 01174020	        add   $t0, $t0, $s7  # result + counter col
 313 01a4 21080000	        addi  $t0, $t0, 0   # result + 0
 314 01a8 20090004	        addi  $t1, $zero, 4   #4 bytes
 315 01ac 01090018	        mult  $t0, $t1
 316 01b0 00004012	        mflo  $t0
 317 01b4               # get value from address
 318 01b4 3C0A0000	        la    $t2, grid_location
     01b8 354A0000
 319 01bc 010A4020	        add   $t0, $t0, $t2
 320 01c0 8D080000	        lw    $t0, 0($t0)      # grid location
 321 01c4 3C0A0000	        la    $t2, grid_core
     01c8 354A0000
 322 01cc 010A4020	        add   $t0, $t0, $t2
 323 01d0 81080000	        lb    $t0, 0($t0)      # grid core char value
 324 01d4               # compare value: t0 is value from board
 325 01d4 11120001	        beq   $t0, $s2, hor_if_two
 326 01d8               
 327 01d8 080000AA	        j     hor_else
 328 01dc               
 329 01dc               hor_if_two:
 330 01dc               # math (7 * r) + c + 1
 331 01dc 02360018	        mult  $s1, $s6    # (7 * counter row)
 332 01e0 00004012	        mflo  $t0
 333 01e4 01174020	        add   $t0, $t0, $s7  # result + counter col
 334 01e8 21080001	        addi  $t0, $t0, 1   # result + 1
 335 01ec 20090004	        addi  $t1, $zero, 4   #4 bytes
 336 01f0 01090018	        mult  $t0, $t1
 337 01f4 00004012	        mflo  $t0
 338 01f8               # get value from address
 339 01f8 3C0A0000	        la    $t2, grid_location
     01fc 354A0000
 340 0200 010A4020	        add   $t0, $t0, $t2
 341 0204 8D080000	        lw    $t0, 0($t0)      # grid location
 342 0208 3C0A0000	        la    $t2, grid_core
     020c 354A0000
 343 0210 010A4020	        add   $t0, $t0, $t2
 344 0214 81080000	        lb    $t0, 0($t0)      # grid core char value
 345 0218               # compare value: t0 is value from board
 346 0218 11120001	        beq   $t0, $s2, hor_if_three
 347 021c 080000AA	        j     hor_else
 348 0220               
 349 0220               hor_if_three:
 350 0220               # math (7 * r) + c + 2
 351 0220 02360018	        mult  $s1, $s6    # (7 * counter row)
 352 0224 00004012	        mflo  $t0
 353 0228 01174020	        add   $t0, $t0, $s7  # result + counter col
 354 022c 21080002	        addi  $t0, $t0, 2   # result + 2
 355 0230 20090004	        addi  $t1, $zero, 4   #4 bytes
 356 0234 01090018	        mult  $t0, $t1
 357 0238 00004012	        mflo  $t0
 358 023c               # get value from address
 359 023c 3C0A0000	        la    $t2, grid_location
     0240 354A0000
 360 0244 010A4020	        add   $t0, $t0, $t2
 361 0248 8D080000	        lw    $t0, 0($t0)      # grid location
 362 024c 3C0A0000	        la    $t2, grid_core
     0250 354A0000
 363 0254 010A4020	        add   $t0, $t0, $t2
 364 0258 81080000	        lb    $t0, 0($t0)      # grid core char value
 365 025c               # compare value: t0 is value from board
 366 025c 11120001	        beq   $t0, $s2, hor_if_four
 367 0260 080000AA	        j     hor_else
 368 0264               
 369 0264               hor_if_four:
 370 0264               # math (7 * r) + c + 3
 371 0264 02360018	        mult  $s1, $s6    # (7 * counter row)
 372 0268 00004012	        mflo  $t0
 373 026c 01174020	        add   $t0, $t0, $s7  # result + counter col
 374 0270 21080003	        addi  $t0, $t0, 3   # result + 3
 375 0274 20090004	        addi  $t1, $zero, 4   #4 bytes
 376 0278 01090018	        mult  $t0, $t1
 377 027c 00004012	        mflo  $t0
 378 0280               # get value from address
 379 0280 3C0A0000	        la    $t2, grid_location
     0284 354A0000
 380 0288 010A4020	        add   $t0, $t0, $t2
 381 028c 8D080000	        lw    $t0, 0($t0)      # grid location
 382 0290 3C0A0000	        la    $t2, grid_core
     0294 354A0000
 383 0298 010A4020	        add   $t0, $t0, $t2
 384 029c 81080000	        lb    $t0, 0($t0)      # grid core char value
 385 02a0               # compare value: t0 is value from board
 386 02a0 11120007	        beq   $t0, $s2, hor_if_true
 387 02a4 080000AA	        j     hor_else
 388 02a8               
 389 02a8               #####
 390 02a8               hor_else:
 391 02a8 22D60001	        addi  $s6, $s6, 1
 392 02ac 08000064	        j     hor_loop_two
 393 02b0               
 394 02b0               
 395 02b0               end_hor_loop_two:
 396 02b0 22F70001	        addi  $s7, $s7, 1
 397 02b4 20160000	        addi  $s6, $zero, 0
 398 02b8               
 399 02b8 08000062	        j     hor_loop_one
 400 02bc               
 401 02bc               end_hor_loop_one:
 402 02bc                       # move on to the next check: vertical
 403 02bc 080000B2	        j     ver_loop_zero
 404 02c0               
 405 02c0               hor_if_true:
 406 02c0 20020000	        addi  $v0, $zero, 0
 407 02c4 080001CA	        j     win_end
 408 02c8               
 409 02c8               #
 410 02c8               # Check vertical locations for win
 411 02c8               #
 412 02c8               ver_loop_zero:
 413 02c8                       # set counter for row and col
 414 02c8 20100006	        addi  $s0, $zero, 6  # row
 415 02cc 20110007	        addi  $s1, $zero, 7   # col
 416 02d0 2215FFFD	        addi  $s5, $s0, -3     # row - 3
 417 02d4 20160000	        addi  $s6, $zero, 0  # counter row
 418 02d8 20170000	        addi  $s7, $zero, 0  # counter col
 419 02dc 080000B8	        j     ver_loop_one
 420 02e0               
 421 02e0               ver_loop_one:
 422 02e0                       # col
 423 02e0 12F1004F	        beq  $s7, $s1, end_ver_loop_one
 424 02e4 080000BA	        j    ver_loop_two
 425 02e8               
 426 02e8               ver_loop_two:
 427 02e8                       # row
 428 02e8 12D5004A	        beq  $s6, $s5, end_ver_loop_two
 429 02ec               
 430 02ec               
 431 02ec               # the if statements
 432 02ec               ver_if_one:
 433 02ec               # do math to $t0: (7 * (r + 0)) + c
 434 02ec 20080000	        addi  $t0, $zero, 0
 435 02f0 01164020	        add   $t0, $t0, $s6  # r + 0
 436 02f4 01110018	        mult  $t0, $s1        # result * 7
 437 02f8 00004012	        mflo  $t0
 438 02fc 01174020	        add   $t0, $t0, $s7  # result + c
 439 0300 20090004	        addi  $t1, $zero, 4   #4 bytes
 440 0304 01090018	        mult  $t0, $t1
 441 0308 00004012	        mflo  $t0
 442 030c               # get value from address
 443 030c 3C0A0000	        la    $t2, grid_location
     0310 354A0000
 444 0314 010A4020	        add   $t0, $t0, $t2
 445 0318 8D080000	        lw    $t0, 0($t0)      # grid location
 446 031c 3C0A0000	        la    $t2, grid_core
     0320 354A0000
 447 0324 010A4020	        add   $t0, $t0, $t2
 448 0328 81080000	        lb    $t0, 0($t0)      # grid core char value
 449 032c               # compare value: t0
 450 032c 11120001	        beq  $t0, $s2, ver_if_two
 451 0330 08000103	        j    ver_else
 452 0334               
 453 0334               
 454 0334               ver_if_two:
 455 0334               # do math to $t0: (7 * (r + 1)) + c
 456 0334 20080001	        addi  $t0, $zero, 1
 457 0338 01164020	        add   $t0, $t0, $s6  # r + 0
 458 033c 01110018	        mult  $t0, $s1        # result * 7
 459 0340 00004012	        mflo  $t0
 460 0344 01174020	        add   $t0, $t0, $s7  # result + c
 461 0348 20090004	        addi  $t1, $zero, 4   #4 bytes
 462 034c 01090018	        mult  $t0, $t1
 463 0350 00004012	        mflo  $t0
 464 0354               # get value from address
 465 0354 3C0A0000	        la    $t2, grid_location
     0358 354A0000
 466 035c 010A4020	        add   $t0, $t0, $t2
 467 0360 8D080000	        lw    $t0, 0($t0)      # grid location
 468 0364 3C0A0000	        la    $t2, grid_core
     0368 354A0000
 469 036c 010A4020	        add   $t0, $t0, $t2
 470 0370 81080000	        lb    $t0, 0($t0)      # grid core char value
 471 0374               # compare value: t0
 472 0374 11120001	        beq  $t0, $s2, ver_if_three
 473 0378 08000103	        j    ver_else
 474 037c               
 475 037c               
 476 037c               ver_if_three:
 477 037c               # do math to $t0: (7 * (r + 2)) + c
 478 037c 20080002	        addi  $t0, $zero, 2
 479 0380 01164020	        add   $t0, $t0, $s6  # r + 0
 480 0384 01110018	        mult  $t0, $s1        # result * 7
 481 0388 00004012	        mflo  $t0
 482 038c 01174020	        add   $t0, $t0, $s7  # result + c
 483 0390 20090004	        addi  $t1, $zero, 4   #4 bytes
 484 0394 01090018	        mult  $t0, $t1
 485 0398 00004012	        mflo  $t0
 486 039c               # get value from address
 487 039c 3C0A0000	        la    $t2, grid_location
     03a0 354A0000
 488 03a4 010A4020	        add   $t0, $t0, $t2
 489 03a8 8D080000	        lw    $t0, 0($t0)      # grid location
 490 03ac 3C0A0000	        la    $t2, grid_core
     03b0 354A0000
 491 03b4 010A4020	        add   $t0, $t0, $t2
 492 03b8 81080000	        lb    $t0, 0($t0)      # grid core char value
 493 03bc               # compare value: t0
 494 03bc 11120001	        beq  $t0, $s2, ver_if_four
 495 03c0 08000103	        j    ver_else
 496 03c4               
 497 03c4               
 498 03c4               ver_if_four:
 499 03c4               # do math to $t0: (7 * (r + 3)) + c
 500 03c4 20080003	        addi  $t0, $zero, 3
 501 03c8 01164020	        add   $t0, $t0, $s6  # r + 0
 502 03cc 01110018	        mult  $t0, $s1        # result * 7
 503 03d0 00004012	        mflo  $t0
 504 03d4 01174020	        add   $t0, $t0, $s7  # result + c
 505 03d8 20090004	        addi  $t1, $zero, 4   #4 bytes
 506 03dc 01090018	        mult  $t0, $t1
 507 03e0 00004012	        mflo  $t0
 508 03e4               # get value from address
 509 03e4 3C0A0000	        la    $t2, grid_location
     03e8 354A0000
 510 03ec 010A4020	        add   $t0, $t0, $t2
 511 03f0 8D080000	        lw    $t0, 0($t0)      # grid location
 512 03f4 3C0A0000	        la    $t2, grid_core
     03f8 354A0000
 513 03fc 010A4020	        add   $t0, $t0, $t2
 514 0400 81080000	        lb    $t0, 0($t0)      # grid core char value
 515 0404               # compare value: t0
 516 0404 11120007	        beq  $t0, $s2, ver_if_true
 517 0408 08000103	        j    ver_else
 518 040c               
 519 040c               
 520 040c               ver_else:
 521 040c 22D60001	        addi $s6, $s6, 1
 522 0410 080000BA	        j    ver_loop_two
 523 0414               
 524 0414               end_ver_loop_two:
 525 0414 22F70001	        addi $s7, $s7, 1
 526 0418 20160000	        addi $s6, $zero, 0
 527 041c 080000B8	        j    ver_loop_one
 528 0420               
 529 0420               end_ver_loop_one:
 530 0420                       # move to the next check: pos diag
 531 0420               
 532 0420 0800010B	        j    pos_loop_zero
 533 0424               
 534 0424               
 535 0424               ver_if_true:
 536 0424 20020000	        addi $v0, $zero, 0
 537 0428 080001CA	        j    win_end
 538 042c               
 539 042c               #
 540 042c               # Check positively sloped diaganols
 541 042c               #
 542 042c               pos_loop_zero:
 543 042c                       # set counter for row and col
 544 042c 20100006	        addi  $s0, $zero, 6  # row
 545 0430 20110007	        addi  $s1, $zero, 7  # col
 546 0434 2214FFFD	        addi  $s4, $s0, -3   # row - 3 = 3
 547 0438 2235FFFD	        addi  $s5, $s1, -3   # col - 3 = 4
 548 043c 20160000	        addi  $s6, $zero, 0  # counter row
 549 0440 20170000	        addi  $s7, $zero, 0  # counter col
 550 0444 08000112	        j     pos_loop_one
 551 0448               
 552 0448               pos_loop_one:
 553 0448                       # col
 554 0448 12F50054	        beq  $s7, $s5, end_pos_loop_one
 555 044c 08000114	        j    pos_loop_two
 556 0450               
 557 0450               pos_loop_two:
 558 0450                       # row
 559 0450 12D4004F	        beq  $s6, $s4, end_pos_loop_two
 560 0454 08000116	        j    pos_if_one
 561 0458               
 562 0458               # the if statements
 563 0458               pos_if_one:
 564 0458               # do math to $t0: (7 * ((r + 0)) + c + 0
 565 0458 20080000	        addi  $t0, $zero, 0
 566 045c 01164020	        add   $t0, $t0, $s6  # r + 0
 567 0460 01110018	        mult  $t0, $s1        # result * 7
 568 0464 00004012	        mflo  $t0
 569 0468 01174020	        add   $t0, $t0, $s7  # result + c
 570 046c 21080000	        addi  $t0, $t0, 0    # result + 0
 571 0470 20090004	        addi  $t1, $zero, 4   #4 bytes
 572 0474 01090018	        mult  $t0, $t1
 573 0478 00004012	        mflo  $t0
 574 047c               # get value from address
 575 047c 3C0A0000	        la    $t2, grid_location
     0480 354A0000
 576 0484 010A4020	        add   $t0, $t0, $t2
 577 0488 8D080000	        lw    $t0, 0($t0)      # grid location
 578 048c 3C0A0000	        la    $t2, grid_core
     0490 354A0000
 579 0494 010A4020	        add   $t0, $t0, $t2
 580 0498 81080000	        lb    $t0, 0($t0)      # grid core char value
 581 049c               # compare value: t0
 582 049c 11120001	        beq  $t0, $s2, pos_if_two
 583 04a0 08000162	        j    pos_else
 584 04a4               
 585 04a4               pos_if_two:
 586 04a4               # do math to $t0: (7 * ((r + 1)) + c + 1
 587 04a4 20080001	        addi  $t0, $zero, 1
 588 04a8 01164020	        add   $t0, $t0, $s6  # r + 1
 589 04ac 01110018	        mult  $t0, $s1        # result * 7
 590 04b0 00004012	        mflo  $t0
 591 04b4 01174020	        add   $t0, $t0, $s7  # result + c
 592 04b8 21080001	        addi  $t0, $t0, 1    # result + 1
 593 04bc 20090004	        addi  $t1, $zero, 4   #4 bytes
 594 04c0 01090018	        mult  $t0, $t1
 595 04c4 00004012	        mflo  $t0
 596 04c8               # get value from address
 597 04c8 3C0A0000	        la    $t2, grid_location
     04cc 354A0000
 598 04d0 010A4020	        add   $t0, $t0, $t2
 599 04d4 8D080000	        lw    $t0, 0($t0)      # grid location
 600 04d8 3C0A0000	        la    $t2, grid_core
     04dc 354A0000
 601 04e0 010A4020	        add   $t0, $t0, $t2
 602 04e4 81080000	        lb    $t0, 0($t0)      # grid core char value
 603 04e8               # compare value: t0
 604 04e8 11120001	        beq  $t0, $s2, pos_if_three
 605 04ec 08000162	        j    pos_else
 606 04f0               
 607 04f0               pos_if_three:
 608 04f0               # do math to $t0: (7 * ((r + 2)) + c + 2
 609 04f0 20080002	        addi  $t0, $zero, 2
 610 04f4 01164020	        add   $t0, $t0, $s6  # r + 2
 611 04f8 01110018	        mult  $t0, $s1        # result * 7
 612 04fc 00004012	        mflo  $t0
 613 0500 01174020	        add   $t0, $t0, $s7  # result + c
 614 0504 21080002	        addi  $t0, $t0, 2    # result + 2
 615 0508 20090004	        addi  $t1, $zero, 4   #4 bytes
 616 050c 01090018	        mult  $t0, $t1
 617 0510 00004012	        mflo  $t0
 618 0514               # get value from address
 619 0514 3C0A0000	        la    $t2, grid_location
     0518 354A0000
 620 051c 010A4020	        add   $t0, $t0, $t2
 621 0520 8D080000	        lw    $t0, 0($t0)      # grid location
 622 0524 3C0A0000	        la    $t2, grid_core
     0528 354A0000
 623 052c 010A4020	        add   $t0, $t0, $t2
 624 0530 81080000	        lb    $t0, 0($t0)      # grid core char value
 625 0534               # compare value: t0
 626 0534 11120001	        beq  $t0, $s2, pos_if_four
 627 0538 08000162	        j    pos_else
 628 053c               
 629 053c               pos_if_four:
 630 053c               # do math to $t0: (7 * ((r + 3)) + c + 3
 631 053c 20080003	        addi  $t0, $zero, 3
 632 0540 01164020	        add   $t0, $t0, $s6  # r + 3
 633 0544 01110018	        mult  $t0, $s1        # result * 7
 634 0548 00004012	        mflo  $t0
 635 054c 01174020	        add   $t0, $t0, $s7  # result + c
 636 0550 21080003	        addi  $t0, $t0, 3    # result + 3
 637 0554 20090004	        addi  $t1, $zero, 4   #4 bytes
 638 0558 01090018	        mult  $t0, $t1
 639 055c 00004012	        mflo  $t0
 640 0560               # get value from address
 641 0560 3C0A0000	        la    $t2, grid_location
     0564 354A0000
 642 0568 010A4020	        add   $t0, $t0, $t2
 643 056c 8D080000	        lw    $t0, 0($t0)      # grid location
 644 0570 3C0A0000	        la    $t2, grid_core
     0574 354A0000
 645 0578 010A4020	        add   $t0, $t0, $t2
 646 057c 81080000	        lb    $t0, 0($t0)      # grid core char value
 647 0580               # compare value: t0
 648 0580 11120007	        beq  $t0, $s2, pos_if_true
 649 0584 08000162	        j    pos_else
 650 0588               
 651 0588               
 652 0588               pos_else:
 653 0588 22D60001	        addi $s6, $s6, 1
 654 058c 08000114	        j    pos_loop_two
 655 0590               
 656 0590               end_pos_loop_two:
 657 0590 22F70001	        addi $s7, $s7, 1
 658 0594 20160000	        addi $s6, $zero, 0
 659 0598 08000112	        j    pos_loop_one
 660 059c               
 661 059c               end_pos_loop_one:
 662 059c                       # move to the next check: neg diag
 663 059c               
 664 059c 0800016A	        j    neg_loop_zero
 665 05a0               
 666 05a0               pos_if_true:
 667 05a0 20020000	        addi $v0, $zero, 0
 668 05a4 080001CA	        j    win_end
 669 05a8               
 670 05a8               
 671 05a8               #
 672 05a8               # Check negatively sloped diaganols
 673 05a8               #
 674 05a8               neg_loop_zero:
 675 05a8                       # set counter for row and col
 676 05a8 20100006	        addi  $s0, $zero, 6  # row
 677 05ac 20110007	        addi  $s1, $zero, 7  # col
 678 05b0               
 679 05b0 2235FFFD	        addi  $s5, $s1, -3   # col - 3 = 4
 680 05b4 20160003	        addi  $s6, $zero, 3  # counter row
 681 05b8 20170000	        addi  $s7, $zero, 0  # counter col
 682 05bc 08000170	        j     neg_loop_one
 683 05c0               
 684 05c0               neg_loop_one:
 685 05c0                       # col
 686 05c0 12F50054	        beq  $s7, $s5, end_neg_loop_one
 687 05c4 08000172	        j    neg_loop_two
 688 05c8               
 689 05c8               neg_loop_two:
 690 05c8                       # row
 691 05c8 12D0004F	        beq  $s6, $s0, end_neg_loop_two
 692 05cc 08000174	        j    neg_if_one
 693 05d0                   
 694 05d0               # the if statements   
 695 05d0               neg_if_one:
 696 05d0               # do math to $t0: (7 * ((r - 0)) + c + 0
 697 05d0 20080000	        addi  $t0, $zero, 0  # -0
 698 05d4 01164020	        add   $t0, $t0, $s6  # r - 0
 699 05d8 01110018	        mult  $t0, $s1        # result * 7
 700 05dc 00004012	        mflo  $t0       
 701 05e0 01174020	        add   $t0, $t0, $s7  # result + c
 702 05e4 21080000	        addi  $t0, $t0, 0    # result + 0
 703 05e8 20090004	        addi  $t1, $zero, 4   #4 bytes
 704 05ec 01090018	        mult  $t0, $t1
 705 05f0 00004012	        mflo  $t0
 706 05f4               # get value from address
 707 05f4 3C0A0000	        la    $t2, grid_location
     05f8 354A0000
 708 05fc 010A4020	        add   $t0, $t0, $t2
 709 0600 8D080000	        lw    $t0, 0($t0)      # grid location
 710 0604 3C0A0000	        la    $t2, grid_core
     0608 354A0000
 711 060c 010A4020	        add   $t0, $t0, $t2
 712 0610 81080000	        lb    $t0, 0($t0)      # grid core char value
 713 0614               # compare value: t0
 714 0614 11120001	        beq  $t0, $s2, neg_if_two
 715 0618 080001C0	        j    neg_else
 716 061c               
 717 061c               neg_if_two:
 718 061c               # do math to $t0: (7 * ((r - 1)) + c + 1
 719 061c 2008FFFF	        addi  $t0, $zero, -1  # -1
 720 0620 01164020	        add   $t0, $t0, $s6  # r - 1
 721 0624 01110018	        mult  $t0, $s1        # result * 7
 722 0628 00004012	        mflo  $t0       
 723 062c 01174020	        add   $t0, $t0, $s7  # result + c
 724 0630 21080001	        addi  $t0, $t0, 1    # result + 1
 725 0634 20090004	        addi  $t1, $zero, 4   #4 bytes
 726 0638 01090018	        mult  $t0, $t1
 727 063c 00004012	        mflo  $t0
 728 0640               # get value from address
 729 0640 3C0A0000	        la    $t2, grid_location
     0644 354A0000
 730 0648 010A4020	        add   $t0, $t0, $t2
 731 064c 8D080000	        lw    $t0, 0($t0)      # grid location
 732 0650 3C0A0000	        la    $t2, grid_core
     0654 354A0000
 733 0658 010A4020	        add   $t0, $t0, $t2
 734 065c 81080000	        lb    $t0, 0($t0)      # grid core char value
 735 0660               # compare value: t0
 736 0660 11120001	        beq  $t0, $s2, neg_if_three
 737 0664 080001C0	        j    neg_else
 738 0668               
 739 0668               neg_if_three:
 740 0668               # do math to $t0: (7 * ((r - 2)) + c + 2
 741 0668 2008FFFE	        addi  $t0, $zero, -2  # -2
 742 066c 01164020	        add   $t0, $t0, $s6  # r - 2
 743 0670 01110018	        mult  $t0, $s1        # result * 7
 744 0674 00004012	        mflo  $t0       
 745 0678 01174020	        add   $t0, $t0, $s7  # result + c
 746 067c 21080002	        addi  $t0, $t0, 2    # result + 2
 747 0680 20090004	        addi  $t1, $zero, 4   #4 bytes
 748 0684 01090018	        mult  $t0, $t1
 749 0688 00004012	        mflo  $t0
 750 068c               # get value from address
 751 068c 3C0A0000	        la    $t2, grid_location
     0690 354A0000
 752 0694 010A4020	        add   $t0, $t0, $t2
 753 0698 8D080000	        lw    $t0, 0($t0)      # grid location
 754 069c 3C0A0000	        la    $t2, grid_core
     06a0 354A0000
 755 06a4 010A4020	        add   $t0, $t0, $t2
 756 06a8 81080000	        lb    $t0, 0($t0)      # grid core char value
 757 06ac               # compare value: t0
 758 06ac 11120001	        beq  $t0, $s2, neg_if_four
 759 06b0 080001C0	        j    neg_else
 760 06b4                           
 761 06b4               neg_if_four:
 762 06b4               # do math to $t0: (7 * ((r - 3)) + c + 3
 763 06b4 2008FFFD	        addi  $t0, $zero, -3  # -3
 764 06b8 01164020	        add   $t0, $t0, $s6  # r - 3
 765 06bc 01110018	        mult  $t0, $s1        # result * 7
 766 06c0 00004012	        mflo  $t0       
 767 06c4 01174020	        add   $t0, $t0, $s7  # result + c
 768 06c8 21080003	        addi  $t0, $t0, 3    # result + 3
 769 06cc 20090004	        addi  $t1, $zero, 4   #4 bytes
 770 06d0 01090018	        mult  $t0, $t1
 771 06d4 00004012	        mflo  $t0
 772 06d8               # get value from address
 773 06d8 3C0A0000	        la    $t2, grid_location
     06dc 354A0000
 774 06e0 010A4020	        add   $t0, $t0, $t2
 775 06e4 8D080000	        lw    $t0, 0($t0)      # grid location
 776 06e8 3C0A0000	        la    $t2, grid_core
     06ec 354A0000
 777 06f0 010A4020	        add   $t0, $t0, $t2
 778 06f4 81080000	        lb    $t0, 0($t0)      # grid core char value
 779 06f8               # compare value: t0
 780 06f8 11120007	        beq  $t0, $s2, neg_if_true
 781 06fc 080001C0	        j    neg_else
 782 0700               
 783 0700               
 784 0700               neg_else:
 785 0700 22D60001	        addi $s6, $s6, 1
 786 0704 08000172	        j    neg_loop_two
 787 0708               
 788 0708               end_neg_loop_two:
 789 0708 22F70001	        addi $s7, $s7, 1
 790 070c 20160003	        addi $s6, $zero, 3
 791 0710 08000170	        j    neg_loop_one
 792 0714               
 793 0714               end_neg_loop_one:
 794 0714                       # all check complete
 795 0714 080001C8	        j    all_if_false
 796 0718               
 797 0718               neg_if_true:
 798 0718 20020000	        addi $v0, $zero, 0
 799 071c 080001CA	        j    win_end
 800 0720               #
 801 0720               # all check complete
 802 0720               #
 803 0720               
 804 0720               
 805 0720               
 806 0720               
 807 0720               all_if_false:
 808 0720 20020001	        addi  $v0, $zero, 1
 809 0724 080001CA	        j     win_end
 810 0728               #
 811 0728               # v0: the winning condition
 812 0728               #
 813 0728               win_end:
 814 0728 8FBF002C	        lw    $ra, -4+FRAMESIZE_48($sp)
 815 072c 8FB70028	        lw    $s7, -8+FRAMESIZE_48($sp)
 816 0730 8FB60024	        lw    $s6, -12+FRAMESIZE_48($sp)
 817 0734 8FB50020	        lw    $s5, -16+FRAMESIZE_48($sp)
 818 0738 8FB4001C	        lw    $s4, -20+FRAMESIZE_48($sp)
 819 073c 8FB30018	        lw    $s3, -24+FRAMESIZE_48($sp)
 820 0740 8FB20014	        lw    $s2, -28+FRAMESIZE_48($sp)
 821 0744 8FB10010	        lw    $s1, -32+FRAMESIZE_48($sp)
 822 0748 8FB0000C	        lw    $s0, -36+FRAMESIZE_48($sp)
 823 074c               
 824 074c 23BD0030	        addi  $sp, $sp, FRAMESIZE_48
 825 0750 03E00008	        jr    $ra
 826 0754               
 827 0754               
 828 0754               
 829 0754               
 830 0754               
 831 0754               
 832 0754               
 833 0754               
 834 0754               
 835 0754               #
 836 0754               # check tie condition
 837 0754               #
 838 0754               tie_and_end:
 839 0754 34020004	        li   $v0, PRINT_STRING
 840 0758 3C040000	        la   $a0, print_tie
     075c 34840000
 841 0760 0000000C	        syscall
 842 0764               
 843 0764 8FBF0000	        lw    $ra, 0($sp)
 844 0768 23BD0004	        addi  $sp, $sp, 4
 845 076c 03E00008	        jr    $ra
 846 0770               
 847 0770               
 848 0770               
 849 0770               
 850 0770               
 851 0770               
 852 0770               
 853 0770               
 854 0770               
 855 0770               
 856 0770               #
 857 0770               # check valid spot in colume
 858 0770               # input-> s1: user input
 859 0770               check_valid_col:
 860 0770 23BDFFFC	        addi  $sp, $sp, -4
 861 0774 AFBF0000	        sw    $ra, 0($sp)
 862 0778               
 863 0778 2008FFFF	        addi  $t0, $zero, -1   # the top
 864 077c 20090005	        addi  $t1, $zero, 5    # counter from bottom
 865 0780 080001E1	        j     check_valid_col_loop
 866 0784               
 867 0784               check_valid_col_loop:
 868 0784 11280018	        beq   $t1, $t0, valid_check_bad_end
 869 0788 200A0007	        addi  $t2, $zero, 7
 870 078c 01490018	        mult  $t2, $t1      # 7 * row
 871 0790 00005012	        mflo  $t2
 872 0794 01515020	        add   $t2, $t2, $s1   # (7*row) + input
 873 0798 200B0004	        addi  $t3, $zero, 4   # the size 4 byte
 874 079c 014B0018	        mult  $t2, $t3
 875 07a0 00005012	        mflo  $t2             # the amount needed to add for index
 876 07a4               
 877 07a4               # get grid location address
 878 07a4 3C0B0000	        la    $t3, grid_location
     07a8 356B0000
 879 07ac 016A5820	        add   $t3, $t3, $t2   # base + index
 880 07b0 8D6B0000	        lw    $t3, 0($t3)     # get value[integer] in index
 881 07b4               
 882 07b4               # get grid core address
 883 07b4 3C0A0000	        la    $t2, grid_core
     07b8 354A0000
 884 07bc 014B5020	        add   $t2, $t2, $t3
 885 07c0 814B0000	        lb    $t3, 0($t2)     # get value in core grid
 886 07c4               
 887 07c4               # compare to check blank
 888 07c4 200C0020	        addi  $t4, $zero, 32
 889 07c8 116C0002	        beq   $t3, $t4, valid_check_good_end
 890 07cc               
 891 07cc 2129FFFF	        addi  $t1, $t1, -1  # go up a row
 892 07d0               
 893 07d0 080001E1	        j     check_valid_col_loop
 894 07d4               
 895 07d4               valid_check_good_end:
 896 07d4 01409821	        move  $s3, $t2   # hold on to the address to change value
 897 07d8 20120000	        addi  $s2, $zero, 0
 898 07dc               
 899 07dc 8FBF0000	        lw    $ra, 0($sp)
 900 07e0 23BD0004	        addi  $sp, $sp, 4
 901 07e4 03E00008	        jr    $ra
 902 07e8               
 903 07e8               valid_check_bad_end:
 904 07e8 20120001	        addi  $s2, $zero, 1
 905 07ec               
 906 07ec 8FBF0000	        lw    $ra, 0($sp)
 907 07f0 23BD0004	        addi  $sp, $sp, 4
 908 07f4 03E00008	        jr    $ra
 909 07f8               
 910 07f8               
 911 07f8               
 912 07f8               
 913 07f8               
 914 07f8               
 915 07f8               
 916 07f8               
 917 07f8               
 918 07f8               
 919 07f8               #
 920 07f8               # print no room in col
 921 07f8               #
 922 07f8               no_room:
 923 07f8                       # print no room
 924 07f8 34020004	        li   $v0, PRINT_STRING
 925 07fc 3C040000	        la   $a0, print_no_room
     0800 34840000
 926 0804 0000000C	        syscall
 927 0808 0800001D	        j    play_game_one
 928 080c               
 929 080c               
 930 080c               
 931 080c               
 932 080c               
 933 080c               
 934 080c               
 935 080c               
 936 080c               
 937 080c               
 938 080c               #       
 939 080c               # check valid input
 940 080c               #
 941 080c               not_valid_input:
 942 080c                       # check valid range for players
 943 080c 34020004	        li    $v0, PRINT_STRING
 944 0810 3C040000	        la    $a0, print_illegal_number
     0814 34840000
 945 0818 0000000C	        syscall
 946 081c 0800001D	        j     play_game_one
 947 0820               
 948 0820               
 949 0820               
 950 0820               
 951 0820               
 952 0820               
 953 0820               
 954 0820               
 955 0820               
 956 0820               
 957 0820               #
 958 0820               # check win
 959 0820               #
 960 0820               player_wins:
 961 0820                       # winning confirmed
 962 0820                       # check who the player is
 963 0820 12000001	        beq   $s0, $zero, player_one_wins
 964 0824 08000211	        j     player_two_wins
 965 0828               
 966 0828               player_one_wins:
 967 0828                       # player one wins
 968 0828 34020004	        li    $v0, PRINT_STRING
 969 082c 3C040000	        la    $a0, print_one_winner
     0830 34840000
 970 0834 0000000C	        syscall
 971 0838               
 972 0838 8FBF0000	        lw    $ra, 0($sp)
 973 083c 23BD0004	        addi  $sp, $sp, 4
 974 0840 03E00008	        jr    $ra
 975 0844               
 976 0844               player_two_wins:
 977 0844                       # player two quits
 978 0844 34020004	        li    $v0, PRINT_STRING
 979 0848 3C040000	        la    $a0, print_two_winner
     084c 34840000
 980 0850 0000000C	        syscall
 981 0854               
 982 0854 8FBF0000	        lw    $ra, 0($sp)
 983 0858 23BD0004	        addi  $sp, $sp, 4
 984 085c 03E00008	        jr    $ra
 985 0860               
 986 0860               
 987 0860               
 988 0860               
 989 0860               
 990 0860               
 991 0860               
 992 0860               
 993 0860               
 994 0860               
 995 0860               #
 996 0860               # check quit
 997 0860               #
 998 0860               player_quits:
 999 0860                       # quiting confirmed
1000 0860                       # check who the player is
1001 0860 12000001	        beq   $s0, $zero, player_one_quits
1002 0864 08000221	        j     player_two_quits
1003 0868               
1004 0868               player_one_quits:
1005 0868                       # player one quits
1006 0868 34020004	        li    $v0, PRINT_STRING
1007 086c 3C040000	        la    $a0, print_one_quit
     0870 34840000
1008 0874 0000000C	        syscall
1009 0878               
1010 0878 8FBF0000	        lw    $ra, 0($sp)
1011 087c 23BD0004	        addi  $sp, $sp, 4
1012 0880 03E00008	        jr    $ra
1013 0884               
1014 0884               player_two_quits:
1015 0884                       # player two quits
1016 0884 34020004	        li    $v0, PRINT_STRING
1017 0888 3C040000	        la    $a0, print_two_quit
     088c 34840000
1018 0890 0000000C	        syscall
1019 0894               
1020 0894 8FBF0000	        lw    $ra, 0($sp)
1021 0898 23BD0004	        addi  $sp, $sp, 4
1022 089c 03E00008	        jr    $ra
1023 08a0               
1024 08a0               
1025 08a0               
1026 08a0               
1027 08a0               
1028 08a0               
1029 08a0               
1030 08a0               
1031 08a0               
1032 08a0               
1033 08a0               #
1034 08a0               #   Display the intro
1035 08a0               #
1036 08a0               display_intro:
1037 08a0 23BDFFFC	        addi  $sp, $sp, -4
1038 08a4 AFBF0000	        sw    $ra, 0($sp)
1039 08a8               
1040 08a8               # print 'Connect Four'
1041 08a8 34020004	        li    $v0, PRINT_STRING    # system call code for printing string = 4
1042 08ac 3C040000	        la    $a0, print_welcome   # load address of string to be printed in $a0
     08b0 34840000
1043 08b4 0000000C	        syscall
1044 08b8               
1045 08b8               # print new line
1046 08b8 34020004	        li    $v0, PRINT_STRING
1047 08bc 3C040000	        la    $a0, print_newline
     08c0 34840000
1048 08c4 0000000C	        syscall
1049 08c8               
1050 08c8               # print part 1 of board
1051 08c8 34020004	        li    $v0, PRINT_STRING
1052 08cc 3C040000	        la    $a0, grid_intro
     08d0 34840000
1053 08d4 0000000C	        syscall
1054 08d8               
1055 08d8               # print part 2 of board
1056 08d8 34020004	        li    $v0, PRINT_STRING
1057 08dc 3C040000	        la    $a0, grid_core
     08e0 34840000
1058 08e4 0000000C	        syscall
1059 08e8               
1060 08e8               # print part 3 of board
1061 08e8 34020004	        li    $v0, PRINT_STRING
1062 08ec 3C040000	        la    $a0, grid_end
     08f0 34840000
1063 08f4 0000000C	        syscall
1064 08f8               
1065 08f8               
1066 08f8               
1067 08f8 8FBF0000	        lw    $ra, 0($sp)
1068 08fc 23BD0004	        addi  $sp, $sp, 4
1069 0900 03E00008	        jr    $ra
1070 0904               
1071 0904               
1072 0904               
1073 0904               
1074 0904               
1075 0904               
1076 0904               
1077 0904               
1078 0904               
1079 0904               
1080 0904               #
1081 0904               # Display the board
1082 0904               #
1083 0904               display_board:
1084 0904 23BDFFFC	        addi  $sp, $sp, -4
1085 0908 AFBF0000	        sw    $ra, 0($sp)
1086 090c               
1087 090c               # print new line
1088 090c 34020004	        li    $v0, PRINT_STRING
1089 0910 3C040000	        la    $a0, print_newline
     0914 34840000
1090 0918 0000000C	        syscall
1091 091c               
1092 091c               # print part 1 of board
1093 091c 34020004	        li    $v0, PRINT_STRING
1094 0920 3C040000	        la    $a0, grid_intro
     0924 34840000
1095 0928 0000000C	        syscall
1096 092c               
1097 092c               # print part 2 of board
1098 092c 34020004	        li    $v0, PRINT_STRING
1099 0930 3C040000	        la    $a0, grid_core
     0934 34840000
1100 0938 0000000C	        syscall
1101 093c               
1102 093c               # print part 3 of board
1103 093c 34020004	        li    $v0, PRINT_STRING
1104 0940 3C040000	        la    $a0, grid_end
     0944 34840000
1105 0948 0000000C	        syscall
1106 094c               
1107 094c 8FBF0000	        lw    $ra, 0($sp)
1108 0950 23BD0004	        addi  $sp, $sp, 4
1109 0954 03E00008	        jr    $ra
1110 0958               
1111 0958               
1112 0958               


FRAMESIZE_48          = 00000030   
LENGTH                = 0000002A   
PRINT_INT             = 00000001   
PRINT_STRING          = 00000004   
READ_INT              = 00000005   
all_if_false            00000720 R  text 
check_valid_col         00000770 R  text 
check_valid_col_loop    00000784 R  text 
display_board           00000904 R  text 
display_intro           000008A0 R  text 
end_hor_loop_one        000002BC R  text 
end_hor_loop_two        000002B0 R  text 
end_neg_loop_one        00000714 R  text 
end_neg_loop_two        00000708 R  text 
end_pos_loop_one        0000059C R  text 
end_pos_loop_two        00000590 R  text 
end_ver_loop_one        00000420 R  text 
end_ver_loop_two        00000414 R  text 
goto_player_one         00000120 R  text 
goto_player_two         00000128 R  text 
grid_core               00000073 R  data 
grid_end                00000254 R  data 
grid_intro              00000055 R  data 
grid_location           00000274 R  data 
hor_else                000002A8 R  text 
hor_if_four             00000264 R  text 
hor_if_one              00000198 R  text 
hor_if_three            00000220 R  text 
hor_if_true             000002C0 R  text 
hor_if_two              000001DC R  text 
hor_loop_one            00000188 R  text 
hor_loop_two            00000190 R  text 
hor_loop_zero           00000178 R  text 
main                    00000000 RG text 
neg_else                00000700 R  text 
neg_if_four             000006B4 R  text 
neg_if_one              000005D0 R  text 
neg_if_three            00000668 R  text 
neg_if_true             00000718 R  text 
neg_if_two              0000061C R  text 
neg_loop_one            000005C0 R  text 
neg_loop_two            000005C8 R  text 
neg_loop_zero           000005A8 R  text 
no_room                 000007F8 R  text 
not_valid_input         0000080C R  text 
place_o                 000000F0 R  text 
place_x                 000000E0 R  text 
play_game_four          00000118 R  text 
play_game_one           00000074 R  text 
play_game_three         00000100 R  text 
play_game_two           000000A4 R  text 
play_game_zero          00000060 R  text 
player_one_message      0000007C R  text 
player_one_quits        00000868 R  text 
player_one_wins         00000828 R  text 
player_quits            00000860 R  text 
player_two_message      00000090 R  text 
player_two_quits        00000884 R  text 
player_two_wins         00000844 R  text 
player_wins             00000820 R  text 
pos_else                00000588 R  text 
pos_if_four             0000053C R  text 
pos_if_one              00000458 R  text 
pos_if_three            000004F0 R  text 
pos_if_true             000005A0 R  text 
pos_if_two              000004A4 R  text 
pos_loop_one            00000448 R  text 
pos_loop_two            00000450 R  text 
pos_loop_zero           0000042C R  text 
print_illegal_number    000003A0 R  data 
print_newline           0000031C R  data 
print_no_room           000003B7 R  data 
print_one_quit          0000041D R  data 
print_one_winner        000003FB R  data 
print_player_one        00000320 R  data 
print_player_two        00000360 R  data 
print_space             0000031E R  data 
print_tie               000003E2 R  data 
print_two_quit          0000042D R  data 
print_two_winner        0000040C R  data 
print_welcome           00000000 R  data 
tie_and_end             00000754 R  text 
valid_check_bad_end     000007E8 R  text 
valid_check_good_end    000007D4 R  text 
ver_else                0000040C R  text 
ver_if_four             000003C4 R  text 
ver_if_one              000002EC R  text 
ver_if_three            0000037C R  text 
ver_if_true             00000424 R  text 
ver_if_two              00000334 R  text 
ver_loop_one            000002E0 R  text 
ver_loop_two            000002E8 R  text 
ver_loop_zero           000002C8 R  text 
win_end                 00000728 R  text 
win_o                   00000170 R  text 
win_start               00000130 R  text 
win_x                   00000168 R  text 
